<?php

namespace App\Filament\Resources\ProjectCases\Schemas;

use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\Repeater;
use Illuminate\Support\HtmlString;
use Filament\Schemas\Schema;
use Illuminate\Support\Str;

class ProjectCaseForm
{
    public static function configure(Schema $schema): Schema
    {
        return $schema
            ->components([
                TextInput::make('case_id')
                    ->required(),
                TextInput::make('title')
                    ->required(),
                TextInput::make('client')
                    ->required(),
                Select::make('industry_category_id')
                    ->relationship('industryCategory', 'name', function ($query) {
                        $query->where('is_active', true);
                    })
                    ->required()
                    ->searchable()
                    ->preload()
                    ->options(function () {
                        return \App\Models\IndustryCategory::active()
                            ->get()
                            ->mapWithKeys(fn ($category) => [
                                $category->id => $category->name
                            ]);
                    }),
                TextInput::make('period')
                    ->required(),
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                FileUpload::make('image')
                    ->image()
                    ->disk('public')
                    ->directory('images')
                    ->visibility('public'),
                Textarea::make('description')
                    ->label('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
                    ->required()
                    ->rows(4)
                    ->columnSpanFull(),
                // === üìä –ú–ï–¢–†–ò–ö–ò –î–û/–ü–û–°–õ–ï ===
                Repeater::make('metrics')
                    ->label('–ú–µ—Ç—Ä–∏–∫–∏ "–î–æ –∏ –ü–æ—Å–ª–µ"')
                    ->schema([
                        TextInput::make('name')
                            ->label('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
                            ->placeholder('–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—Ä–∞—Ñ–∏–∫, –ö–æ–Ω–≤–µ—Ä—Å–∏—è, –õ–∏–¥—ã')
                            ->required(),
                        TextInput::make('before')
                            ->label('–î–æ')
                            ->placeholder('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ'),
                        TextInput::make('after')
                            ->label('–ü–æ—Å–ª–µ')
                            ->placeholder('–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ'),
                    ])
                    ->addActionLabel('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É')
                    ->reorderableWithButtons()
                    ->collapsible()
                    ->columnSpanFull()
                    ->grid(3),
                Toggle::make('is_published')
                    ->required(),
                TextInput::make('sort_order')
                    ->required()
                    ->numeric()
                    ->default(0),

                // === üîó –°–°–´–õ–ö–ê –ù–ê –£–°–õ–£–ì–£ ===
                TextInput::make('service_link_text')
                    ->label('–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Å–ª—É–≥—É')
                    ->placeholder('–ù–∞–ø—Ä–∏–º–µ—Ä: SEO –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ')
                    ->helperText('–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ —Å—Å—ã–ª–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫–µ–π—Å–∞'),

                TextInput::make('service_link_url')
                    ->label('URL —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Å–ª—É–≥—É')
                    ->placeholder('–ù–∞–ø—Ä–∏–º–µ—Ä: /services/seo-prodvizhenie')
                    ->helperText('URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ª—É–≥–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å)'),

                Select::make('user_id')
                    ->relationship('user', 'name')
                    ->required(),

                // === üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ï–ö–¢–ê ===
                Repeater::make('results')
                    ->label('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞')
                    ->simple(
                        TextInput::make('result')
                            ->placeholder('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞')
                            ->required()
                    )
                    ->addActionLabel('–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
                    ->reorderableWithButtons()
                    ->collapsible()
                    ->columnSpanFull()
                    ->grid(2),
                // === HTML –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
                Textarea::make('content')
                    ->label('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (HTML)')
                    ->rows(6)
                    ->live(onBlur: true)
                    ->helperText('–í–≤–æ–¥–∏—Ç–µ HTML-–∫–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥–∏: <p>, <h2>, <h3>, <ul>, <li>, <strong>, <em>, <a>')
                    ->columnSpanFull(),

                Placeholder::make('content_preview')
                    ->label('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
                    ->content(function ($get) {
                        $content = $get('content');
                        if (!$content) {
                            return new HtmlString('<div class="text-gray-500 italic p-4 bg-gray-50 rounded-lg">–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞</div>');
                        }

                        return new HtmlString(
                            '<div class="p-4 bg-white border rounded-lg shadow-sm" style="max-height: 250px; overflow-y: auto;">' .
                            '<div style="color: #4b5563; line-height: 1.6;">' .
                            '<style scoped>' .
                            '.preview-content h1 { font-size: 2rem; font-weight: bold; color: #1f2937; margin: 1.5rem 0 1rem 0; }' .
                            '.preview-content h2 { font-size: 1.75rem; font-weight: bold; color: #1f2937; margin: 1.25rem 0 0.75rem 0; }' .
                            '.preview-content h3 { font-size: 1.5rem; font-weight: 600; color: #1f2937; margin: 1rem 0 0.5rem 0; }' .
                            '.preview-content p { margin-bottom: 1rem; color: #4b5563; line-height: 1.6; }' .
                            '.preview-content ul { list-style-type: disc; list-style-position: inside; margin-bottom: 1rem; }' .
                            '.preview-content ol { list-style-type: decimal; list-style-position: inside; margin-bottom: 1rem; }' .
                            '.preview-content li { margin-bottom: 0.5rem; color: #4b5563; }' .
                            '.preview-content strong { font-weight: 600; color: #1f2937; }' .
                            '.preview-content em { font-style: italic; }' .
                            '.preview-content a { color: #0891b2; text-decoration: underline; }' .
                            '</style>' .
                            '<div class="preview-content">' . $content . '</div>' .
                            '</div>' .
                            '</div>'
                        );
                    })
                    ->hidden(fn ($get) => empty($get('content')))
                    ->columnSpanFull(),
                TextInput::make('meta_title')
                    ->label('SEO –ó–∞–≥–æ–ª–æ–≤–æ–∫')
                    ->placeholder('–í–≤–µ–¥–∏—Ç–µ SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫'),
                Textarea::make('meta_description')
                    ->label('SEO –û–ø–∏—Å–∞–Ω–∏–µ')
                    ->placeholder('–í–≤–µ–¥–∏—Ç–µ SEO –æ–ø–∏—Å–∞–Ω–∏–µ')
                    ->columnSpanFull(),
            ]);
    }
}
