<?php

namespace App\Filament\Resources\Services\Schemas;

use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\ColorPicker;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\Repeater;
use Filament\Forms\Components\Placeholder;
use Filament\Schemas\Schema;
use Illuminate\Support\HtmlString;

class ServiceForm
{
    public static function configure(Schema $schema): Schema
    {
        return $schema
            ->components([
                TextInput::make('title')
                    ->required()
                    ->live(onBlur: true)
                    ->afterStateUpdated(function (string $operation, $state, callable $set) {
                        if ($operation !== 'create') {
                            return;
                        }
                        $set('slug', \Illuminate\Support\Str::slug($state));
                    }),
                TextInput::make('slug')
                    ->required()
                    ->unique(ignoreRecord: true)
                    ->live(onBlur: true)
                    ->afterStateUpdated(fn (callable $set, $state) => $set('slug', \Illuminate\Support\Str::slug($state))),
                Textarea::make('description')
                    ->rows(3)
                    ->columnSpanFull(),

                // === HTML –ö–û–ù–¢–ï–ù–¢ ===
                Textarea::make('content')
                    ->label('–ö–æ–Ω—Ç–µ–Ω—Ç (HTML)')
                    ->rows(8)
                    ->live(onBlur: true)
                    ->helperText('–í–≤–æ–¥–∏—Ç–µ HTML-–∫–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥–∏: <p>, <h2>, <h3>, <ul>, <li>, <strong>, <em>, <a>')
                    ->columnSpanFull(),

                Placeholder::make('content_preview')
                    ->label('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
                    ->content(function ($get) {
                        $content = $get('content');
                        if (!$content) {
                            return new HtmlString('<div class="text-gray-500 italic p-4 bg-gray-50 rounded-lg">–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã—à–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞</div>');
                        }

                        return new HtmlString(
                            '<div class="p-4 bg-white border rounded-lg shadow-sm" style="max-height: 300px; overflow-y: auto;">' .
                            '<div style="color: #4b5563; line-height: 1.6;">' .
                            '<style scoped>' .
                            '.preview-content h1 { font-size: 2rem; font-weight: bold; color: #1f2937; margin: 1.5rem 0 1rem 0; }' .
                            '.preview-content h2 { font-size: 1.75rem; font-weight: bold; color: #1f2937; margin: 1.25rem 0 0.75rem 0; }' .
                            '.preview-content h3 { font-size: 1.5rem; font-weight: 600; color: #1f2937; margin: 1rem 0 0.5rem 0; }' .
                            '.preview-content p { margin-bottom: 1rem; color: #4b5563; line-height: 1.6; }' .
                            '.preview-content ul { list-style-type: disc; list-style-position: inside; margin-bottom: 1rem; }' .
                            '.preview-content ol { list-style-type: decimal; list-style-position: inside; margin-bottom: 1rem; }' .
                            '.preview-content li { margin-bottom: 0.5rem; color: #4b5563; }' .
                            '.preview-content strong { font-weight: 600; color: #1f2937; }' .
                            '.preview-content em { font-style: italic; }' .
                            '.preview-content a { color: #0891b2; text-decoration: underline; }' .
                            '</style>' .
                            '<div class="preview-content">' . $content . '</div>' .
                            '</div>' .
                            '</div>'
                        );
                    })
                    ->hidden(fn ($get) => empty($get('content')))
                    ->columnSpanFull(),
                ColorPicker::make('color')
                    ->required()
                    ->default('#06b6d4')
                    ->hex()
                    ->formatStateUsing(fn ($state) => $state ?: '#06b6d4')
                    ->live()
                    ->helperText('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è —É—Å–ª—É–≥–∏'),
                Placeholder::make('icon_preview')
                    ->label('–ü—Ä–µ–≤—å—é –∏–∫–æ–Ω–∫–∏')
                    ->content(function ($get) {
                        $icon = $get('icon') ?: 'business';
                        $color = $get('color') ?: '#06b6d4';

                        return new \Illuminate\Support\HtmlString(
                            '<div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg border border-gray-200">' .
                            '<div class="inline-flex items-center justify-center w-10 h-10 rounded-lg shadow-sm border" style="background-color: ' . $color . '20; border-color: ' . $color . '40;">' .
                            '<i class="material-icons text-xl" style="color: ' . $color . '">' . $icon . '</i>' .
                            '</div>' .
                            '<div class="flex flex-col">' .
                            '<span class="text-sm font-medium text-gray-900">' . $icon . '</span>' .
                            '<span class="text-xs text-gray-500">' . $color . '</span>' .
                            '</div>' .
                            '</div>'
                        );
                    })
                    ->hidden(fn ($get) => empty($get('icon'))),
                TextInput::make('icon')
                    ->live()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ Material Icons (–Ω–∞–ø—Ä–∏–º–µ—Ä: business, trending_up, web)')
                    ->placeholder('business'),
                FileUpload::make('image')
                    ->image()
                    ->disk('public')
                    ->directory('images')
                    ->visibility('public'),
                TextInput::make('price_from')
                    ->numeric()
                    ->prefix('‚ÇΩ')
                    ->helperText('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"'),
                Select::make('price_type')
                    ->options([
                        'project' => '–ó–∞ –ø—Ä–æ–µ–∫—Ç',
                        'hour' => '–ó–∞ —á–∞—Å',
                        'month' => '–ó–∞ –º–µ—Å—è—Ü',
                    ])
                    ->default('project')
                    ->required(),
Repeater::make('features')
                    ->simple(
                        TextInput::make('feature')
                            ->placeholder('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏')
                    )
                    ->addActionLabel('–î–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å')
                    ->columnSpanFull()
                    ->grid(2),

                // === SEO –ù–ê–°–¢–†–û–ô–ö–ò ===
                TextInput::make('meta_title')
                    ->label('Meta Title')
                    ->helperText('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º')
                    ->columnSpanFull(),
                Textarea::make('meta_description')
                    ->label('Meta Description')
                    ->rows(3)
                    ->helperText('–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º')
                    ->columnSpanFull(),
                TextInput::make('meta_keywords')
                    ->label('Meta Keywords')
                    ->helperText('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
                    ->columnSpanFull(),

                // === –ù–ê–°–¢–†–û–ô–ö–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ===
                Toggle::make('is_published')
                    ->label('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
                    ->default(true)
                    ->helperText('–£—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ'),
                Toggle::make('is_featured')
                    ->label('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è')
                    ->helperText('–£—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è'),
                Toggle::make('show_on_homepage')
                    ->label('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π')
                    ->helperText('–£—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–µ–∫—Ü–∏–∏ —É—Å–ª—É–≥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'),
                TextInput::make('sort_order')
                    ->label('–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏')
                    ->numeric()
                    ->default(0)
                    ->helperText('–ß–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ'),

                // === üîó –°–í–Ø–ó–ò ===

                // –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
                TextInput::make('related_service_1_id')
                    ->label('üîó ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ #1')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏"'),

                TextInput::make('related_service_2_id')
                    ->label('üîó ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ #2')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏"'),

                TextInput::make('related_service_3_id')
                    ->label('üîó ID —Å–≤—è–∑–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ #3')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏"'),

                // –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
                TextInput::make('related_article_1_id')
                    ->label('üì∞ ID –ø–æ–ª–µ–∑–Ω–æ–π —Å—Ç–∞—Ç—å–∏ #1')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"'),

                TextInput::make('related_article_2_id')
                    ->label('üì∞ ID –ø–æ–ª–µ–∑–Ω–æ–π —Å—Ç–∞—Ç—å–∏ #2')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"'),

                TextInput::make('related_article_3_id')
                    ->label('üì∞ ID –ø–æ–ª–µ–∑–Ω–æ–π —Å—Ç–∞—Ç—å–∏ #3')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"'),

                // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–µ–π—Å—ã
                TextInput::make('related_case_1_id')
                    ->label('üíº ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞ #1')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID –∫–µ–π—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–ù–∞—à–∏ –∫–µ–π—Å—ã"'),

                TextInput::make('related_case_2_id')
                    ->label('üíº ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞ #2')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID –∫–µ–π—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–ù–∞—à–∏ –∫–µ–π—Å—ã"'),

                TextInput::make('related_case_3_id')
                    ->label('üíº ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞ #3')
                    ->numeric()
                    ->helperText('–í–≤–µ–¥–∏—Ç–µ ID –∫–µ–π—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ "–ù–∞—à–∏ –∫–µ–π—Å—ã"'),
            ]);
    }
}
